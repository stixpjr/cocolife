* CORE 2023-03-23
* REQD EXTERNAL EQUATES
* PG0	PAGE0 ADDR
* PG1	PAGE1 ADDR
* PGSZ	PAGE SIZE BYTES
* PG1 = PG0 + PGSZ
* PGRWSZ	PAGE ROW SIZE
*
* SCRATCH VARS IN DP PAGE
	SETDP	$0
	LBSR	TBLGEN
FILL	LDX	#PG0
	LDD	#0
	STD	CNTLST
	CLR	CNTSAM
FILL1	LBSR	RND
	STA	,X+
	CMPX	#PG1
	BLO	FILL1

* INCLUDE FOR TESTING
*	INCLUDE	TSTPTN.ASM

* CLEAR SET PIXEL COUNT
LOOP	CLR	CNTPIX
	CLR	CNTPIX+1

* START CORE LIFE
* SRC BUF PTR IN X
* DST BUF (X-PGSZ)
* COLUMN COUNT IN Y
* BITCOUNTS CNTB1 TO CNTB4
* SUM/MASK MIXB1 TO MIXB4
* SUM SUMB1
* MASK MSKB1
	LDX	#PG0

* TOP LINE, LEFT-MOST BYTE
	LDY	#0
	LDU	#LOCNT
* LEFT BYTES
	LDA	PGSZ-1,X
	LDB	A,U
	LDA	PGRWSZ-1,X
	ADDB	A,U
	LDA	PGRWSZ*2-1,X
	ADDB	A,U
	STB	CNTB1
* MIDDLE-RIGHT NIBBLE
	LDA	PGSZ-PGRWSZ,X
	LDB	A,U
	LDA	,X
	ADDB	A,U
	LDA	PGRWSZ,X
	ADDB	A,U
	STB	CNTB3
* MIDDLE-LEFT NIBBLE
	LDU	#HICNT
	LDA	PGSZ-PGRWSZ,X
	LDB	A,U
	LDA	,X
	ADDB	A,U
	LDA	PGRWSZ,X
	ADDB	A,U
	STB	CNTB2
* RIGHT BYTES
	LDA	PGSZ-PGRWSZ+1,X
	LDB	A,U
	LDA	1,X
	ADDB	A,U
	LDA	PGRWSZ+1,X
	ADDB	A,U
	STB	CNTB4
	LBSR	PIXOUT
	LEAX	1,X
	LEAY	1,Y

* TOP LINE, MIDDLE SECTION
LTM1	LDU	#LOCNT
* LEFT BYTES
	LDA	PGSZ-PGRWSZ-1,X
	LDB	A,U
	LDA	-1,X
	ADDB	A,U
	LDA	PGRWSZ-1,X
	ADDB	A,U
	STB	CNTB1
* MIDDLE-RIGHT NIBBLE
	LDA	PGSZ-PGRWSZ,X
	LDB	A,U
	LDA	,X
	ADDB	A,U
	LDA	PGRWSZ,X
	ADDB	A,U
	STB	CNTB3
* MIDDLE-LEFT NIBBLE
	LDU	#HICNT
	LDA	PGSZ-PGRWSZ,X
	LDB	A,U
	LDA	,X
	ADDB	A,U
	LDA	PGRWSZ,X
	ADDB	A,U
	STB	CNTB2
* RIGHT BYTES
	LDA	PGSZ-PGRWSZ+1,X
	LDB	A,U
	LDA	1,X
	ADDB	A,U
	LDA	PGRWSZ+1,X
	ADDB	A,U
	STB	CNTB4
	LBSR	PIXOUT
	LEAX	1,X
	LEAY	1,Y
	CMPY	#PGRWSZ-1
	BNE	LTM1

* TOP LINE, RIGHT-MOST BYTE
	LDU	#LOCNT
* LEFT BYTES
	LDA	PGSZ-PGRWSZ-1,X
	LDB	A,U
	LDA	-1,X
	ADDB	A,U
	LDA	PGRWSZ-1,X
	ADDB	A,U
	STB	CNTB1
* MIDDLE-RIGHT NIBBLE
	LDA	PGSZ-PGRWSZ,X
	LDB	A,U
	LDA	,X
	ADDB	A,U
	LDA	PGRWSZ,X
	ADDB	A,U
	STB	CNTB3
* MIDDLE-LEFT NIBBLE
	LDU	#HICNT
	LDA	PGSZ-PGRWSZ,X
	LDB	A,U
	LDA	,X
	ADDB	A,U
	LDA	PGRWSZ,X
	ADDB	A,U
	STB	CNTB2
* RIGHT BYTES
	LDA	PGSZ-PGRWSZ*2+1,X
	LDB	A,U
	LDA	-PGRWSZ+1,X
	ADDB	A,U
	LDA	1,X
	ADDB	A,U
	STB	CNTB4
	LBSR	PIXOUT
	LEAX	1,X

* MIDDLE SECTION, LEFT-MOST BYTE
LML1	LDY	#0
	LDU	#LOCNT
* LEFT BYTES
	LDA	-1,X
	LDB	A,U
	LDA	PGRWSZ-1,X
	ADDB	A,U
	LDA	PGRWSZ*2-1,X
	ADDB	A,U
	STB	CNTB1
* MIDDLE-RIGHT NIBBLE
	LDA	-PGRWSZ,X
	LDB	A,U
	LDA	,X
	ADDB	A,U
	LDA	PGRWSZ,X
	ADDB	A,U
	STB	CNTB3
* MIDDLE-LEFT NIBBLE
	LDU	#HICNT
	LDA	-PGRWSZ,X
	LDB	A,U
	LDA	,X
	ADDB	A,U
	LDA	PGRWSZ,X
	ADDB	A,U
	STB	CNTB2
* RIGHT BYTES
	LDA	-PGRWSZ+1,X
	LDB	A,U
	LDA	1,X
	ADDB	A,U
	LDA	PGRWSZ+1,X
	ADDB	A,U
	STB	CNTB4
	LBSR	PIXOUT
	LEAX	1,X
	LEAY	1,Y

* MIDDLE SECTION, MIDDLE SECTION
* THIS IS THE MAIN ONE!
LMM1	LDU	#LOCNT
* LEFT BYTES
	LDA	-PGRWSZ-1,X
	LDB	A,U
	LDA	-1,X
	ADDB	A,U
	LDA	PGRWSZ-1,X
	ADDB	A,U
	STB	CNTB1
* MIDDLE-RIGHT NIBBLE
	LDA	-PGRWSZ,X
	LDB	A,U
	LDA	,X
	ADDB	A,U
	LDA	PGRWSZ,X
	ADDB	A,U
	STB	CNTB3
* MIDDLE-LEFT NIBBLE
	LDU	#HICNT
	LDA	-PGRWSZ,X
	LDB	A,U
	LDA	,X
	ADDB	A,U
	LDA	PGRWSZ,X
	ADDB	A,U
	STB	CNTB2
* RIGHT BYTES
	LDA	-PGRWSZ+1,X
	LDB	A,U
	LDA	1,X
	ADDB	A,U
	LDA	PGRWSZ+1,X
	ADDB	A,U
	STB	CNTB4
	LBSR	PIXOUT
	LEAX	1,X
	LEAY	1,Y
	CMPY	#PGRWSZ-1
	BNE	LMM1

* MIDDLE SECTION, RIGHT-MOST BYTE
	LDU	#LOCNT
* LEFT BYTES
	LDA	-PGRWSZ-1,X
	LDB	A,U
	LDA	-1,X
	ADDB	A,U
	LDA	PGRWSZ-1,X
	ADDB	A,U
	STB	CNTB1
* MIDDLE-RIGHT NIBBLE
	LDA	-PGRWSZ,X
	LDB	A,U
	LDA	,X
	ADDB	A,U
	LDA	PGRWSZ,X
	ADDB	A,U
	STB	CNTB3
* MIDDLE-LEFT NIBBLE
	LDU	#HICNT
	LDA	-PGRWSZ,X
	LDB	A,U
	LDA	,X
	ADDB	A,U
	LDA	PGRWSZ,X
	ADDB	A,U
	STB	CNTB2
* RIGHT BYTES
	LDA	-PGRWSZ*2+1,X
	LDB	A,U
	LDA	-PGRWSZ+1,X
	ADDB	A,U
	LDA	1,X
	ADDB	A,U
	STB	CNTB4
	LBSR	PIXOUT
	LEAX	1,X
	CMPX	#PG0+PGSZ-PGRWSZ
	LBLO	LML1

* BOTTOM LINE, LEFT-MOST BYTE
	LDY	#0
	LDU	#LOCNT
* LEFT BYTES
	LDA	-1,X
	LDB	A,U
	LDA	PGRWSZ-1,X
	ADDB	A,U
	LDA	-PGSZ+PGRWSZ*2-1,X
	ADDB	A,U
	STB	CNTB1
* MIDDLE-RIGHT NIBBLE
	LDA	-PGRWSZ,X
	LDB	A,U
	LDA	,X
	ADDB	A,U
	LDA	-PGSZ+PGRWSZ,X
	ADDB	A,U
	STB	CNTB3
* MIDDLE-LEFT NIBBLE
	LDU	#HICNT
	LDA	-PGRWSZ,X
	LDB	A,U
	LDA	,X
	ADDB	A,U
	LDA	-PGSZ+PGRWSZ,X
	ADDB	A,U
	STB	CNTB2
* RIGHT BYTES
	LDA	-PGRWSZ+1,X
	LDB	A,U
	LDA	1,X
	ADDB	A,U
	LDA	-PGSZ+PGRWSZ+1,X
	ADDB	A,U
	STB	CNTB4
	LBSR	PIXOUT
	LEAX	1,X
	LEAY	1,Y

* BOTTOM LINE, MIDDLE SECTION
LBM1	LDU	#LOCNT
* LEFT BYTES
	LDA	-PGRWSZ-1,X
	LDB	A,U
	LDA	-1,X
	ADDB	A,U
	LDA	-PGSZ+PGRWSZ-1,X
	ADDB	A,U
	STB	CNTB1
* MIDDLE-RIGHT NIBBLE
	LDA	-PGRWSZ,X
	LDB	A,U
	LDA	,X
	ADDB	A,U
	LDA	-PGSZ+PGRWSZ,X
	ADDB	A,U
	STB	CNTB3
* MIDDLE-LEFT NIBBLE
	LDU	#HICNT
	LDA	-PGRWSZ,X
	LDB	A,U
	LDA	,X
	ADDB	A,U
	LDA	-PGSZ+PGRWSZ,X
	ADDB	A,U
	STB	CNTB2
* RIGHT BYTES
	LDA	-PGRWSZ+1,X
	LDB	A,U
	LDA	1,X
	ADDB	A,U
	LDA	-PGSZ+PGRWSZ+1,X
	ADDB	A,U
	STB	CNTB4
	LBSR	PIXOUT
	LEAX	1,X
	LEAY	1,Y
	CMPY	#PGRWSZ-1
	BNE	LBM1

* BOTTOM LINE, RIGHT-MOST BYTE
	LDU	#LOCNT
* LEFT BYTES
	LDA	-PGRWSZ-1,X
	LDB	A,U
	LDA	-1,X
	ADDB	A,U
	LDA	-PGSZ+PGRWSZ-1,X
	ADDB	A,U
	STB	CNTB1
* MIDDLE-RIGHT NIBBLE
	LDA	-PGRWSZ,X
	LDB	A,U
	LDA	,X
	ADDB	A,U
	LDA	-PGSZ+PGRWSZ,X
	ADDB	A,U
	STB	CNTB3
* MIDDLE-LEFT NIBBLE
	LDU	#HICNT
	LDA	-PGRWSZ,X
	LDB	A,U
	LDA	,X
	ADDB	A,U
	LDA	-PGSZ+PGRWSZ,X
	ADDB	A,U
	STB	CNTB2
* RIGHT BYTES
	LDA	-PGRWSZ*2+1,X
	LDB	A,U
	LDA	-PGRWSZ+1,X
	ADDB	A,U
	LDA	-PGSZ+1,X
	ADDB	A,U
	STB	CNTB4
	LBSR	PIXOUT
*
* COMPLETED ONE FRAME!
*
* CHECK BREAK KEY
	JSR	[POLCAT]
	CMPA	#3
	BNE	CNTP0
	JMP	[RESETV]

* CHECK CNTPIX AGAINST CNTLST
CNTP0	LDD	CNTLST
	SUBD	CNTPIX
	BGE	CNTP1
* NEGD IS 6309 ONLY
	COMA
	COMB
	ADDD	#1
CNTP1	CMPD	#$10
	BGT	CNTP2
	LDA	CNTSAM
	INCA
	CMPA	#$40
	LBGT	FILL
	STA	CNTSAM
	BRA	COPY
CNTP2	LDD	CNTPIX
	STD	CNTLST
	CLR	CNTSAM

* COPY FROM PG1 TO PG0
COPY	LDX	#PG0
	LDY	#PG1
COPY1	LDD	,Y++
	STD	,X++
	CMPX	#PG1
	BLO	COPY1
	LBRA	LOOP

* PIXOUT:
* USE COUNTS, OUTPUT PIXELS
* LEFT BLOCK 1, MIXB1
PIXOUT	LDA	CNTB1
	ANDA	#$03
	STA	MIXB1
	LDA	CNTB2
	ANDA	#$FC
	ORA	MIXB1
	STA	MIXB1
* BLOCK 2, MIXB2
	LDA	CNTB2
	ANDA	#$3F
	STA	MIXB2
	LDA	CNTB3
	ANDA	#$C0
	ORA	MIXB2
	STA	MIXB2
* BLOCK 3, MIXB3
	LDA	CNTB2
	ANDA	#$03
	STA	MIXB3
	LDA	CNTB3
	ANDA	#$FC
	ORA	MIXB3
	STA	MIXB3
* BLOCK 4, MIXB4
	LDA	CNTB3
	ANDA	#$3F
	STA	MIXB4
	LDA	CNTB4
	ANDA	#$C0
	ORA	MIXB4
	STA	MIXB4
* BUILD SUM BYTE SUMB1
	LDU	#LTSUM
	LDA	MIXB1
	LDB	A,U
	LSLB
	LSLB
	LSLB
	LSLB
	STB	SUMB1
	LDA	MIXB3
	LDB	A,U
	ORB	SUMB1
	STB	SUMB1
	LDU	#RTSUM
	LDA	MIXB2
	LDB	A,U
	LSLB
	LSLB
	LSLB
	LSLB
	ORB	SUMB1
	STB	SUMB1
	LDA	MIXB4
	LDB	A,U
	ORB	SUMB1
	STB	SUMB1
* BUILD MASK BYTE MSKB1
	LDU	#LTMSK
	LDA	MIXB1
	LDB	A,U
	LSLB
	LSLB
	LSLB
	LSLB
	STB	MSKB1
	LDA	MIXB3
	LDB	A,U
	ORB	MSKB1
	STB	MSKB1
	LDU	#RTMSK
	LDA	MIXB2
	LDB	A,U
	LSLB
	LSLB
	LSLB
	LSLB
	ORB	MSKB1
	STB	MSKB1
	LDA	MIXB4
	LDB	A,U
	ORB	MSKB1
	STB	MSKB1
* APPLY MASK AND SUM
	LDA	,X
	ANDA	MSKB1
	ORA	SUMB1
	STA	PGSZ,X
* INC SET PIXEL COUNTER
	LDU	#POPCNT
	LDB	A,U
	TFR	X,U
	LDX	CNTPIX
	ABX
	STX	CNTPIX
	TFR	U,X
	RTS
* EQUATES
* SCRATCH VARS IN DP PAGE
* RND USES 0-3 INCL.
CNTB1	EQU	$04
CNTB2	EQU	$05
CNTB3	EQU	$06
CNTB4	EQU	$07
MIXB1	EQU	$08
MIXB2	EQU	$09
MIXB3	EQU	$0A
MIXB4	EQU	$0B
SUMB1	EQU	$0C
MSKB1	EQU	$0D
* 16-BIT COUNT OF SET PIXELS
CNTPIX	EQU	$0E
* PREVIOUS SET PIXEL COUNT
CNTLST	EQU	$10
* COUNT OF CYCLES WITH SMALL DELTA
CNTSAM	EQU	$12
